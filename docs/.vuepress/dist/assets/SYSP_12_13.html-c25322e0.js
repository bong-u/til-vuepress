import{_ as a,p as e,q as i,a1 as l}from"./framework-96b046e1.js";const n={},s=l(`<h1 id="_221208-sysp" tabindex="-1"><a class="header-anchor" href="#_221208-sysp" aria-hidden="true">#</a> 221208 SYSP</h1><h2 id="목차" tabindex="-1"><a class="header-anchor" href="#목차" aria-hidden="true">#</a> 목차</h2><h3 id="_12-memory-1" tabindex="-1"><a class="header-anchor" href="#_12-memory-1" aria-hidden="true">#</a> <a href="#12-memory-1">12 - memory 1</a></h3><h3 id="_13-memory-2" tabindex="-1"><a class="header-anchor" href="#_13-memory-2" aria-hidden="true">#</a> <a href="#13-memory-2">13 - memory 2</a></h3><hr><h2 id="_12-memory-1-1" tabindex="-1"><a class="header-anchor" href="#_12-memory-1-1" aria-hidden="true">#</a> 12-memory-1</h2><h3 id="메모리에-관한-불편한-진실" tabindex="-1"><a class="header-anchor" href="#메모리에-관한-불편한-진실" aria-hidden="true">#</a> 메모리에 관한 불편한 진실</h3><ul><li>메모리는 무한의 자원이 아니다</li></ul><h3 id="동적-메모리-할당" tabindex="-1"><a class="header-anchor" href="#동적-메모리-할당" aria-hidden="true">#</a> 동적 메모리 할당</h3><ul><li>직접(explicit) vs 간접(implicit) 메모리 할당기 <ul><li>직접 할당 : 응용프로그램이 할당하고, 반환한다 <ul><li>ex) malloc, free</li></ul></li><li>간접 할당 : 응용프로그램이 할당하지만, 반환하지는 않는다 <ul><li>ex) java의 garbage collector</li></ul></li></ul></li></ul><h3 id="프로세스의-메모리-이미지" tabindex="-1"><a class="header-anchor" href="#프로세스의-메모리-이미지" aria-hidden="true">#</a> 프로세스의 메모리 이미지</h3><ul><li>스택은 아래로, 힙은 위로 성장한다</li><li>sbrk 함수가 추가적인 힙 메모리를 운영체제로부터 요청한다 (brk 포인터 이동)</li></ul><h3 id="malloc-package" tabindex="-1"><a class="header-anchor" href="#malloc-package" aria-hidden="true">#</a> Malloc package</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span>
<span class="token comment">// 성공시 : 최소 size 바이트의 메모리 블록의 포인터를 반환 (대게 8바이트 단위로 맞추어)</span>
<span class="token comment">// 실패시 : NULL리턴, set errno</span>

<span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>p<span class="token punctuation">)</span>
<span class="token comment">// 가용 메모리 풀을 가리키는 블록 포인터 p 리턴</span>

<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">realloc</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span>
<span class="token comment">// 블록 p의 크기를 변경하고, 새 블록의 포인터를 리턴</span>
<span class="token comment">// 새 블록의 내용은 이전 블록과 새 블록 크기 중 적은 크기까지는 변화 없음</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="우수한-malloc-free-프로그램의-목표" tabindex="-1"><a class="header-anchor" href="#우수한-malloc-free-프로그램의-목표" aria-hidden="true">#</a> 우수한 malloc/free 프로그램의 목표</h3><ol><li>주요 목표 <ul><li>malloc과 free에서 우수한 시간 성능을 얻는다</li><li>우수한 공간 이용율을 가져야 한다</li></ul></li><li>다른 목표 <ul><li>우수한 지역성 : 시간적으로 인접 (또는 유사한 객체) -&gt; 공간상으로 인접</li><li>견고성 : free(p1) 함수가 유효한 포인터 p1에 대해 수행하는지 체크할 수 있다.</li></ul></li></ol><h3 id="성능-지표-1-처리량-throughput" tabindex="-1"><a class="header-anchor" href="#성능-지표-1-처리량-throughput" aria-hidden="true">#</a> 성능 지표 1 : 처리량 (Throughput)</h3><ul><li><p>단위 시간 동안 완료한 요청의 수</p><h3 id="성능-지표-2-최대-메모리-이용율-utilization" tabindex="-1"><a class="header-anchor" href="#성능-지표-2-최대-메모리-이용율-utilization" aria-hidden="true">#</a> 성능 지표 2 : 최대 메모리 이용율 (Utilization)</h3></li><li><p>k개의 요청 후에, 최대 메모리 이용율 $$ U_{k} = (max_{i&lt;=k}: P_{i}) / H_{k} $$</p></li></ul><h3 id="내부-메모리-단편화-internal-fragmentation" tabindex="-1"><a class="header-anchor" href="#내부-메모리-단편화-internal-fragmentation" aria-hidden="true">#</a> 내부 메모리 단편화 (Internal Fragmentation)</h3><ul><li>일부 블록에서 블록 크기와 데이터 크기간의 차이로 인해 발생</li><li>이전 요청 패턴에 의해서만 영향을 받으므로 <strong>측정이 용이</strong></li></ul><h3 id="외부-메모리-단편화-external-fragmentation" tabindex="-1"><a class="header-anchor" href="#외부-메모리-단편화-external-fragmentation" aria-hidden="true">#</a> 외부 메모리 단편화 (External Fragmentation)</h3><ul><li>힙 전체 메모리를 합치면 수용이 가능하지만 가용 블록의 크기가 작은 경우에 발생</li><li>외부 단편화는 미래의 요청 패턴에 의해 결정되므로 <strong>측정이 어렵다</strong></li></ul><h3 id="free-블럭-관리하기" tabindex="-1"><a class="header-anchor" href="#free-블럭-관리하기" aria-hidden="true">#</a> Free 블럭 관리하기</h3><ol><li>간접리스트 : 크기 정보를 이용하여 모든 블록을 연결</li><li>직접리스트 : 가용 블록내에 포인터를 이용</li><li>구분 가용리스트 : 크기 클래스마다 별도의 가용 리스트를 유지</li><li>크기로 정렬된 블록</li></ol><h3 id="방법-1-간접-리스트-방식-implicit-list" tabindex="-1"><a class="header-anchor" href="#방법-1-간접-리스트-방식-implicit-list" aria-hidden="true">#</a> 방법 1 : 간접 리스트 방식 (Implicit List)</h3><ul><li><p>1 word = size(a) + payload + padding</p></li><li><p>연습문제</p><blockquote><p>제한사항 : 헤더는 4바이트, double-word alignment, 블록의 크기는 8의 배수</p></blockquote><table><thead><tr><th>요청</th><th>block size</th><th>block header(hex)</th></tr></thead><tbody><tr><td>Malloc(1)</td><td>4+1+3 = 8</td><td>size | alloc = 0x8 | 1 = 0x9</td></tr><tr><td>Malloc(5)</td><td>4+5+7 = 16</td><td>size | alloc = 0x8 | 5 = 0xD</td></tr><tr><td>Malloc(12)</td><td>4+12+0 = 16</td><td>size | alloc = 0x8 | 12 = 0x1A</td></tr><tr><td>Malloc(13)</td><td>4+13+7 = 24</td><td>size | alloc = 0x8 | 13 = 0x1B</td></tr></tbody></table></li></ul><h3 id="간접-리스트-free-블록-찾기" tabindex="-1"><a class="header-anchor" href="#간접-리스트-free-블록-찾기" aria-hidden="true">#</a> 간접 리스트 : Free 블록 찾기</h3><ol><li>First fit</li><li>Next fit</li><li>Best fit</li></ol><h3 id="간접-리스트-결합-coalescing" tabindex="-1"><a class="header-anchor" href="#간접-리스트-결합-coalescing" aria-hidden="true">#</a> 간접 리스트 : 결합 (Coalescing)</h3><ul><li>free할때 해당 블록의 할당 플래그만 0으로 세팅 -&gt; 잘못된 단편화 발생</li><li>free하는 블록의 이전과 다음 블록을 함께 연결해서 더 큰 free블록을 만든다</li></ul><h3 id="간접-리스트-양방향-연결" tabindex="-1"><a class="header-anchor" href="#간접-리스트-양방향-연결" aria-hidden="true">#</a> 간접 리스트 : 양방향 연결</h3><ul><li>경계 태그 (Boundary tags)</li><li>header를 복제해서 블록의 마지막에 넣는다 (-&gt; footer)</li></ul><h2 id="_13-memory-2-1" tabindex="-1"><a class="header-anchor" href="#_13-memory-2-1" aria-hidden="true">#</a> 13-memory-2</h2><h3 id="직접-리스트" tabindex="-1"><a class="header-anchor" href="#직접-리스트" aria-hidden="true">#</a> 직접 리스트</h3><ul><li>가용 블록들의 리스트만을 관리하면, 모든 블록을 관리하지 않는다</li><li>연결 링크는 메모리 블럭의 순서와 무관하다</li></ul><h3 id="직접-리스트-free" tabindex="-1"><a class="header-anchor" href="#직접-리스트-free" aria-hidden="true">#</a> 직접 리스트 : Free</h3><ul><li>새롭게 반환한 블록은 가용리스트의 어느 위치에 끼워 넣어야 하는가?</li></ul><ol><li>LIFO (last in first out) 정책 : 반환블록을 리스트 맨 앞에 끼워넣는 방법 -&gt; 빠른 시간, 나쁜 단편화 성능</li><li>주소정렬 정책 : 블록들의 주소가 순서를 유지하도록 삽입 -&gt; 느린 시간, 우수한 단편화 성능</li></ol><h3 id="직접리스트-간접리스트" tabindex="-1"><a class="header-anchor" href="#직접리스트-간접리스트" aria-hidden="true">#</a> 직접리스트 &lt;-&gt; 간접리스트</h3><ul><li>할당시간이 전체 블록의 수가 아니라 가용블록 수에 비례한다</li><li>할당과 반환 과정이 복잡하다.</li><li>링크 포인터 저장을 위해 추가적인 공간이 필요하다 (블록마다 2워드 추가 필요)</li></ul><h3 id="구분-가용-리스트-segrated-free-list" tabindex="-1"><a class="header-anchor" href="#구분-가용-리스트-segrated-free-list" aria-hidden="true">#</a> 구분 가용 리스트 (segrated free list)</h3><ul><li><p>각 크기 클래스들은 클래스마다의 블록들을 관리한다</p></li><li><p>크기 n의 블록 할당 방법</p><ul><li><p>크기 n의 블록 리스트가 비어있지 않은 경우</p><ol><li>리스트의 첫 블록을 할당한다.</li></ol></li><li><p>가용리스트가 비어 있는 경우</p><ol><li>새 페이지를 할당받는다 (OS로부터 sbrk()를 사용하여)</li><li>이 페이지의 모든 블록들로부터 새로운 가용리스트를 생성한다</li><li>리스트의 첫 블록을 할당한다</li></ol></li><li><p>블록 반환 방법</p><ul><li>가용 리스트에 추가</li><li>블록 연결 후 해당 클래스 가용리스트에 추가</li></ul></li></ul></li><li><p>장점</p><ul><li>높은 처리량</li><li>우수한 메모리 이용률</li></ul></li></ul>`,42),r=[s];function t(d,o){return e(),i("div",null,r)}const c=a(n,[["render",t],["__file","SYSP_12_13.html.vue"]]);export{c as default};
