import{_ as n,p as s,q as a,a1 as t}from"./framework-96b046e1.js";const e={},p=t(`<h1 id="객체지향설계-ood" tabindex="-1"><a class="header-anchor" href="#객체지향설계-ood" aria-hidden="true">#</a> 객체지향설계(OOD)</h1><h2 id="design-pattern" tabindex="-1"><a class="header-anchor" href="#design-pattern" aria-hidden="true">#</a> Design pattern</h2><ul><li><p>Bridge</p></li><li><p>Composite</p><ul><li><p>tree형태로 구성, 부모 클래스 객체에 자식 객체를 담는다</p></li><li><p>polymorphic하게 구현</p></li></ul></li><li><p>Facade</p><ul><li><p>facade한 클래스 하나가 다른 클래스를 불러서 처리</p></li><li><p>효과 : 복잡한 framework가 드러나지 않는다</p></li></ul></li><li><p>Proxy</p><ul><li><p>third party module과 client 사이에 proxy class를 만든다</p></li><li><p>third party module의 기능에 무언가를 추가하거나 수정 가능</p></li><li><p>third party module이 외부에 드러나지 않는다</p></li></ul></li></ul><h2 id="stl" tabindex="-1"><a class="header-anchor" href="#stl" aria-hidden="true">#</a> STL</h2><table><thead><tr><th></th><th style="text-align:center;">array</th><th style="text-align:center;">vector</th><th style="text-align:center;">list</th><th>deque</th></tr></thead><tbody><tr><td>random-access</td><td style="text-align:center;">O</td><td style="text-align:center;">O</td><td style="text-align:center;">X</td><td>O</td></tr><tr><td>push_front</td><td style="text-align:center;">X</td><td style="text-align:center;">insert</td><td style="text-align:center;">O</td><td>O</td></tr></tbody></table><ul><li><p>stack</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack&gt;</span></span>
std<span class="token double-colon punctuation">::</span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> st<span class="token punctuation">;</span>
st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>queue</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span>
std<span class="token double-colon punctuation">::</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> que<span class="token punctuation">;</span>
que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>sort (set &amp; map)</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">IntCompare</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> x<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> y<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> x <span class="token operator">&lt;</span> y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">StringCompare</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> x<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> y<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="template" tabindex="-1"><a class="header-anchor" href="#template" aria-hidden="true">#</a> Template</h2><h3 id="template-function-overload-resolution" tabindex="-1"><a class="header-anchor" href="#template-function-overload-resolution" aria-hidden="true">#</a> Template function overload resolution</h3><ol><li><p>정확히 일치하는 함수</p></li><li><p>템플릿을 통해 생성</p></li><li><p>overload resolution</p><ol><li><p>정확히 일치하는 함수</p></li><li><p>Promotion</p></li><li><p>Standard type conversion</p></li><li><p>Implicit or user-defined type conversion</p></li><li><p>ERROR : ambiguous function calls</p></li></ol></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;existing one&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> y<span class="token punctuation">)</span> <span class="token operator">?</span> x <span class="token operator">:</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
T <span class="token function">Max</span><span class="token punctuation">(</span>T x<span class="token punctuation">,</span> T y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;generated one&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> y<span class="token punctuation">)</span> <span class="token operator">?</span> x <span class="token operator">:</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token comment">// 이미 존재하는 int Max</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token number">3.8</span><span class="token punctuation">,</span> <span class="token number">7.2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token comment">// T Max 함수 생성 (double)</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token number">3.8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token comment">// type conversion (double-&gt;int)</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;b&#39;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// generate one (char)</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// promotion (char-&gt;int)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>./a.out
existing one
7
generated one
7.2
existing one
7
generated one
b
existing one
97
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="exception-handling" tabindex="-1"><a class="header-anchor" href="#exception-handling" aria-hidden="true">#</a> Exception Handling</h2><h3 id="wrap-around-for-overflow" tabindex="-1"><a class="header-anchor" href="#wrap-around-for-overflow" aria-hidden="true">#</a> Wrap around for overflow</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">WrapAroundForMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> kMin <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token punctuation">(</span>kMax <span class="token operator">-</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">WrapAroundForMin</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> kMax <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token punctuation">(</span>kMin <span class="token operator">-</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="여러-기능" tabindex="-1"><a class="header-anchor" href="#여러-기능" aria-hidden="true">#</a> 여러 기능</h3><ul><li><p>Catch all (...)</p></li><li><p>Rethrow</p></li><li><p><em>noexcept</em> keyword</p></li></ul><h2 id="dynamic-dispatch-and-multiple-inheritance" tabindex="-1"><a class="header-anchor" href="#dynamic-dispatch-and-multiple-inheritance" aria-hidden="true">#</a> Dynamic dispatch and Multiple inheritance</h2><h3 id="polymorphism" tabindex="-1"><a class="header-anchor" href="#polymorphism" aria-hidden="true">#</a> Polymorphism</h3><ol><li><p>function overloading : using compile time types of arguments</p></li><li><p>function overriding : using runtime types of receiver objects</p></li></ol><h3 id="virtual-function-for-dynamic-dispatch" tabindex="-1"><a class="header-anchor" href="#virtual-function-for-dynamic-dispatch" aria-hidden="true">#</a> virtual function for dynamic dispatch</h3><ul><li><p>dynamic dispatch를 사용하기 위한 조건</p><ol><li><p>함수가 virtual하게 정의되어 있어야 한다</p></li><li><p>receiver object가 포인터 또는 참조를 통해</p></li></ol></li></ul><h2 id="design-pattern-1" tabindex="-1"><a class="header-anchor" href="#design-pattern-1" aria-hidden="true">#</a> Design pattern</h2><ul><li><p>Singleton</p><p>자신의 객체와 생성자를 private member로 만든다</p></li><li><p>Builder</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">friend</span> HouseBuilder<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Prototype</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Shape<span class="token operator">*</span> <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">Circle</span><span class="token punctuation">(</span>color_<span class="token punctuation">,</span> radius_<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Abstract factory</p><p>모든 공장들의 abstract한 interface 생성</p></li><li><p>Adapter</p><p>호환되지 않는 두 interface를 중간에서 연결</p></li><li><p>Bridge</p><p>Device 클래스와 Remote 클래스를 분리</p></li><li><p>Composite</p><p>자식들이 tree형태로 상속하는 구조</p></li><li><p>Facade</p><p>복잡한 내부 모듈 앞에 단순화된 하나의 Facade class 생성</p></li><li><p>Proxy</p><p>third-party모듈과 client사이를 연결</p><p>adapter는 third-party 객체를 멤버 변수로 소유</p></li></ul>`,23),o=[p];function l(c,i){return s(),a("div",null,o)}const r=n(e,[["render",l],["__file","221215.html.vue"]]);export{r as default};
