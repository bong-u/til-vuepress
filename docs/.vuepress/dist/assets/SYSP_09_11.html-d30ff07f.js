import{_ as n,p as s,q as a,a1 as p}from"./framework-96b046e1.js";const t={},e=p(`<h1 id="_221207-sysp" tabindex="-1"><a class="header-anchor" href="#_221207-sysp" aria-hidden="true">#</a> 221207 SYSP</h1><h2 id="목차" tabindex="-1"><a class="header-anchor" href="#목차" aria-hidden="true">#</a> 목차</h2><h3 id="_09-process-1" tabindex="-1"><a class="header-anchor" href="#_09-process-1" aria-hidden="true">#</a> <a href="#09-process1">09 - process 1</a></h3><h3 id="_10-process-2" tabindex="-1"><a class="header-anchor" href="#_10-process-2" aria-hidden="true">#</a> <a href="#10-process2">10 - process 2</a></h3><h3 id="_11-signal" tabindex="-1"><a class="header-anchor" href="#_11-signal" aria-hidden="true">#</a> <a href="#11-signal">11 - signal</a></h3><hr><h2 id="_09-process1" tabindex="-1"><a class="header-anchor" href="#_09-process1" aria-hidden="true">#</a> 09-process1</h2><h3 id="예외적인-제어-흐름" tabindex="-1"><a class="header-anchor" href="#예외적인-제어-흐름" aria-hidden="true">#</a> 예외적인 제어 흐름</h3><ul><li>하위 매커니즘 <ol><li>예외 (Exception)</li></ol></li><li>상위 매커니즘 <ol><li>프로세스 컨텍스트 전환 <ul><li>OS 소프트웨어와 하드웨어 타이머로 구현</li></ul></li><li>시그널 <ul><li>OS 소프트웨어로 구현</li></ul></li><li>nolocal 점프</li></ol></li></ul><h3 id="예외-테이블-exception-tables" tabindex="-1"><a class="header-anchor" href="#예외-테이블-exception-tables" aria-hidden="true">#</a> 예외 테이블 (Exception Tables)</h3><ul><li>각 이벤트 타입은 예외번호 k를 갖는다</li></ul><h3 id="비동기형-예외-interrupt" tabindex="-1"><a class="header-anchor" href="#비동기형-예외-interrupt" aria-hidden="true">#</a> 비동기형 예외 (Interrupt)</h3><ul><li><p>입출력 인터럽트 (ctrl + c)</p></li><li><p>하드 리셋 인터러트</p></li><li><p>소프트 리셋 인터럽트</p><h3 id="동기형-예외" tabindex="-1"><a class="header-anchor" href="#동기형-예외" aria-hidden="true">#</a> 동기형 예외</h3></li><li><p>Traps : 명령어의 결과로 발생하는 의도적인 예외 (syscall)</p></li><li><p>Faults : 핸들러가 정정할 수 있는 에러의 결과로 발생 (page faults)</p></li><li><p>Aborts : 복구 불가능한 에러의 결과로 발생</p></li></ul><h3 id="page-fault" tabindex="-1"><a class="header-anchor" href="#page-fault" aria-hidden="true">#</a> Page Fault</h3><ul><li><p>사용자 메모리의 특정 페이지가 현재 하드디스크에 위치하는 경우</p></li><li><p>오류 처리후에 오류를 발생시킨 명령어를 다시 실행한다</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> a <span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
a<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="process" tabindex="-1"><a class="header-anchor" href="#process" aria-hidden="true">#</a> Process</h3><blockquote><p>프로세스 : 운영체제가 만들어 주는 프로그램의 한 실행 예</p></blockquote></li><li><p>프로그램에 2개의 중요한 추상화 제공</p><ol><li>논리적인 제어 흐름 : 각 프로그램이 CPU를 독점하는 것처럼 보이게 한다</li><li>사적인 주소 공간 : 각 프로그램이 주 메모리를 독점하는 것 처럼 보이도록 한다</li></ol></li><li><p>어떻게?</p><ol><li>프로세스의 실행이 서로 교대로 실행된다</li><li>주소공간의 가상메모리 시스템에 의해 관리</li></ol></li></ul><h3 id="multiprocessing-과거" tabindex="-1"><a class="header-anchor" href="#multiprocessing-과거" aria-hidden="true">#</a> Multiprocessing (과거)</h3><ol><li><p>현재 레지스터들을 메모리에 보관</p></li><li><p>다음 프로세스를 실행하기 위해 스케쥴링</p></li><li><p>보관된 레지스터들을 가져오고 주소공간을 전환 (context switch)</p><h3 id="multiprocessing-현대" tabindex="-1"><a class="header-anchor" href="#multiprocessing-현대" aria-hidden="true">#</a> Multiprocessing (현대)</h3></li><li><p>멀티코어 프로세서</p></li><li><p>각 코어는 별도의 프로세스를 실행 가능</p></li></ol><h3 id="동시성-프로세스" tabindex="-1"><a class="header-anchor" href="#동시성-프로세스" aria-hidden="true">#</a> 동시성 프로세스</h3><ol><li>두 프로세스의 실행시간이 서로 중첩되면 -&gt; <b>concurrent</b></li><li>중첩되지 않고 순차적으로 실행된다면 -&gt; <b>sequential</b></li></ol><h3 id="fork" tabindex="-1"><a class="header-anchor" href="#fork" aria-hidden="true">#</a> fork</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>호출하는 프로세스와 동일한 새 프로세스 생성</li><li>자식 프로세스는 0을 리턴</li><li>부모 프로세스는 자식 프로세스의 pid 리턴</li></ul><h3 id="exit" tabindex="-1"><a class="header-anchor" href="#exit" aria-hidden="true">#</a> exit</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>종료 상태 status 값을 가지고 종료 (정상이면 0)</li><li>atexit() 함수는 exit 할 때 실행할 함수를 등록</li></ul><h3 id="좀비-zombies" tabindex="-1"><a class="header-anchor" href="#좀비-zombies" aria-hidden="true">#</a> 좀비 (Zombies)</h3><ul><li><p>종료되었지만, 아직 정리되지 않은 프로세스</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">fork8</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Running child, PID = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Terminating Parent, PID = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_10-process2" tabindex="-1"><a class="header-anchor" href="#_10-process2" aria-hidden="true">#</a> 10-process2</h2><h3 id="wait" tabindex="-1"><a class="header-anchor" href="#wait" aria-hidden="true">#</a> wait</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">wait</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>child_status<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>현재 프로세스를 자신의 자식 프로세스들 중에 하나가 종료될 때까지 정지시킨다</p></li><li><p>리턴값은 종료한 자식 프로세스의 PID</p></li><li><p>child_status != NULL인 경우, 자식 프로그램의 종료 이유를 나타내는 상태정보를 갖는다</p></li><li><p>example</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">pid_t</span> wpid <span class="token operator">=</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>child_status<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WIFEXITED</span><span class="token punctuation">(</span>child_status<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Child %d terminated with exit status %d\\n&quot;</span><span class="token punctuation">,</span> wpid<span class="token punctuation">,</span> <span class="token function">WEXITSTATUS</span><span class="token punctuation">(</span>child_status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Child %d terminate abnormally\\n&quot;</span><span class="token punctuation">,</span> wpid<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="waitpid" tabindex="-1"><a class="header-anchor" href="#waitpid" aria-hidden="true">#</a> waitpid</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">waitpid</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>status<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>pid : 특정 pid의 프로세스를 기다린다. -1이면 wait()과 동일</p></li><li><p>options : 0 (종료된 자식을 기다린다), WNOHANG(==1 한번만 체크), WUNTRACED(==2, 정지되거나 종료된 자식을 기다린다)</p><h3 id="sleep" tabindex="-1"><a class="header-anchor" href="#sleep" aria-hidden="true">#</a> sleep</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 자기 자신을 secs초 동안 정지</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> secs<span class="token punctuation">)</span>
<span class="token comment">// 호출하는 프로세스를 시그널 받을 때 까지 잠재운다</span>
<span class="token keyword">int</span> <span class="token function">pause</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="execve" tabindex="-1"><a class="header-anchor" href="#execve" aria-hidden="true">#</a> execve</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">execve</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>실행 파일 filename을 현재 프로세스의 환경변수를 이용하면서 argv로 현재의 code, data, stack을 덮어 씌움</p></li><li><p>example</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">execve</span><span class="token punctuation">(</span>myargv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> myargv<span class="token punctuation">,</span> environ<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s: Command not found.\\n&quot;</span><span class="token punctuation">,</span> myargv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="shell" tabindex="-1"><a class="header-anchor" href="#shell" aria-hidden="true">#</a> shell</h3><blockquote><p>사용자의 명령을 처리해주는 응용 프로그램</p></blockquote><ul><li>Utility : file로 구현된 명령어</li><li>Built-in : 코드로 구현된 명령어</li></ul><h3 id="eval" tabindex="-1"><a class="header-anchor" href="#eval" aria-hidden="true">#</a> eval</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmdline<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span>MAXARGS<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> bg<span class="token punctuation">;</span>
  <span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span>

  bg <span class="token operator">=</span> <span class="token function">parseline</span><span class="token punctuation">(</span>cmdline<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">builtin_command</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">execve</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> argv<span class="token punctuation">,</span> environ<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s: Command not found.\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">int</span> status<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">waitpid</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>status<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>
        <span class="token function">unix_error</span><span class="token punctuation">(</span><span class="token string">&quot;waitfg: waitpid error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %s&quot;</span><span class="token punctuation">,</span> pid<span class="token punctuation">,</span> cmdline<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>-&gt; 백그라운드 작업이 종료되면 zombie가 된다</p><ul><li>해결방법 : <strong>signal</strong></li></ul><h2 id="_11-signal-1" tabindex="-1"><a class="header-anchor" href="#_11-signal-1" aria-hidden="true">#</a> 11-signal</h2><h3 id="signal" tabindex="-1"><a class="header-anchor" href="#signal" aria-hidden="true">#</a> Signal</h3><blockquote><p>어떤 이벤트가 시스템에 발생했다는 것을 프로세스에게 알려주는 짧은 메시지</p></blockquote><h3 id="receiving-a-signal" tabindex="-1"><a class="header-anchor" href="#receiving-a-signal" aria-hidden="true">#</a> Receiving a signal</h3><blockquote><p>목적지 프로세스가 시그널을 받을 때, 어떤 형태로든 반응을 하도록 커널에 의해 요구될때, 시그널을 받는다고 한다.</p></blockquote><ul><li>3가지 반응 <ul><li>무시</li><li>대상 프로세스를 종료</li><li><strong>signal handler</strong>라고 부르는 유저레벨 함수를 실행하여 시그널을 잡는다</li></ul></li></ul><h3 id="시그널의-특징" tabindex="-1"><a class="header-anchor" href="#시그널의-특징" aria-hidden="true">#</a> 시그널의 특징</h3><ul><li>프로세스는 특정 시그널의 수신을 블록할 수 있다.</li><li>대기하는 시그널은 최대 한번만 수신할 수 있다.</li><li>커널이 context에 가지고 있는 비트벡터 <ul><li>pending : 대기 시그널들을 표시 <ul><li>도착할때마다 pending값의 k번째 비트를 1로 설정</li><li>수신할때마다 pending값의 k번째 비트를 0으로 설정</li></ul></li><li>blocked : 블록된 시그널들을 표시 <ul><li>sigprocmask 함수를 사용하여 응용프로그램이 1또는 0로 설정</li></ul></li></ul></li></ul><h3 id="프로세스-그룹" tabindex="-1"><a class="header-anchor" href="#프로세스-그룹" aria-hidden="true">#</a> 프로세스 그룹</h3><ul><li>각 프로세스는 하나의 프로세스 그룹에 속한다</li><li>기본적으로 자식은 부모와 같은 그룹에 속한다</li><li>쉘은 각 job마다 별도의 프로세스 그룹을 만든다</li><li>getpgrp() : 프로세스의 프로세스 그룹을 리턴</li><li>setpgid() : 프로세스의 그룹을 변경</li></ul><h3 id="kill" tabindex="-1"><a class="header-anchor" href="#kill" aria-hidden="true">#</a> kill</h3><ul><li>kill -9 24818 : SIGKILL을 pid 24818로 보냄</li><li>kill -9 -24817 : pgid 24871의 각 프로세스에 SIGKILL을 보냄</li></ul><h3 id="키보드로부터-시그널-보내기" tabindex="-1"><a class="header-anchor" href="#키보드로부터-시그널-보내기" aria-hidden="true">#</a> 키보드로부터 시그널 보내기</h3><ul><li>키보드로 ctrl+c (ctrl+z)를 누르면 SIGINT(SIGTSTP) 시그널이 포그라운드 프로세스 그룹의 모든 작업으로 전송된다</li><li>SIGINT : 각 프로세스를 모두 종료시킨다.</li><li>SIGTSTP : 기본 동작은 각 프로세스를 정지시킨다.</li></ul><h3 id="시그널-받기" tabindex="-1"><a class="header-anchor" href="#시그널-받기" aria-hidden="true">#</a> 시그널 받기</h3><ul><li>커널은 pnb = pending &amp; ~blocked 를 계산</li><li>각 시그널 타입은 사전에 정의된 기본 동작을 가진다.</li><li>기본 동작은 signal함수를 이용하여 변경이 가능한다 <strong>(SIGSTOP과 SIGKILL은 예외)</strong></li></ul><h3 id="시그널-핸들러의-설치" tabindex="-1"><a class="header-anchor" href="#시그널-핸들러의-설치" aria-hidden="true">#</a> 시그널 핸들러의 설치</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">handler_t</span> <span class="token operator">*</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token keyword">int</span> signum<span class="token punctuation">,</span> <span class="token class-name">handler_t</span> <span class="token operator">*</span>handler<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>handler의 값 <ul><li>SIG_IGN : signum 타입 시그널 무시</li><li>SIG_DFL : signum의 기본동작으로 복귀</li><li>이외의 경우 : signal handler의 주소</li></ul></li></ul><h3 id="시그널-블록하기와-해제하기" tabindex="-1"><a class="header-anchor" href="#시그널-블록하기와-해제하기" aria-hidden="true">#</a> 시그널 블록하기와 해제하기</h3><ul><li><p>sigprocmask 이용</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sigprocmask</span><span class="token punctuation">(</span><span class="token keyword">int</span> how<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">sigset_t</span> <span class="token operator">*</span>set<span class="token punctuation">,</span> <span class="token class-name">sigset_t</span> <span class="token operator">*</span>oldest<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>how값에 따라 동작이 결정된다</p><ul><li>SIG_BLOCK : blocked = (blocked | set)</li><li>SIG_UNBLOCK : blocked = blocked &amp; ~set</li><li>SIG_SETMASK : blocked = set</li></ul></li><li><p>set 관련 지원 함수</p><ul><li>sigemptyset : 모든 시그널이 비어있는 집합 생성</li><li>sigfillset : 모든 시그널 번호를 1로 설정</li><li>sigaddset : 특정 시그널 번호를 1로 설정</li><li>sigdelset : 특정 시그널 번호를 0으로 설정</li></ul></li></ul><h3 id="경주-race-현상으로-인한-동기화의-문제" tabindex="-1"><a class="header-anchor" href="#경주-race-현상으로-인한-동기화의-문제" aria-hidden="true">#</a> 경주 Race 현상으로 인한 동기화의 문제</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> olderrno <span class="token operator">=</span> errno<span class="token punctuation">;</span>
  <span class="token class-name">sigset_t</span> mask_all<span class="token punctuation">,</span> prev_all<span class="token punctuation">;</span>
  <span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span>

  <span class="token function">sigfillset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mask_all<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pid <span class="token operator">=</span> <span class="token function">waitpid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_BLOCK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mask_all<span class="token punctuation">,</span> <span class="token operator">&amp;</span>prev_all<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">deletejob</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_SETMASK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>prev_all<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">!=</span> ECHILD<span class="token punctuation">)</span>
    <span class="token function">sio_error</span><span class="token punctuation">(</span><span class="token string">&quot;waitpid error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  errno <span class="token operator">=</span> olderno<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> pid<span class="token punctuation">;</span>
  <span class="token class-name">sigset_t</span> mask_all<span class="token punctuation">,</span> prev_all<span class="token punctuation">;</span>
  <span class="token keyword">int</span> n <span class="token operator">=</span> N<span class="token punctuation">;</span> <span class="token comment">// N = 5</span>
  <span class="token function">sigfillset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mask_all<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">signal</span><span class="token punctuation">(</span>SIGCHLD<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">initjobs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">execve</span><span class="token punctuation">(</span><span class="token string">&quot;/bin/date&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// !! 여기서 SIGCHLD가 발생하면 오류</span>

    <span class="token comment">// 핸들러에서 job을 access하지 못하도록 모든 signal block</span>
    <span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_BLOCK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mask_all<span class="token punctuation">,</span> <span class="token operator">&amp;</span>prev_all<span class="token punctuation">)</span>류
    <span class="token function">addjob</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_SETMASK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>prev_all<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>부모가 먼저 SIGCHLD 시그널이 터지기 전에 SIG_BLOCK하고 addjob을 하는 경우 -&gt; OK</li><li>부모가 SIG_BLOCK하기 전에 자식이 끝나는 경우 handler가 먼저 실행된다 addjob하기전에 deletejob 수행 <ul><li>무한 루프 발생</li></ul></li></ul><h3 id="경주현상을-회피하는-동기화-방법" tabindex="-1"><a class="header-anchor" href="#경주현상을-회피하는-동기화-방법" aria-hidden="true">#</a> 경주현상을 회피하는 동기화 방법</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> pid<span class="token punctuation">;</span>
  <span class="token class-name">sigset_t</span> mask_all<span class="token punctuation">,</span> mask_one<span class="token punctuation">,</span> prev_one<span class="token punctuation">;</span>
  <span class="token keyword">int</span> n <span class="token operator">=</span> N<span class="token punctuation">;</span> <span class="token comment">// N = 5</span>
  <span class="token function">sigfillset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mask_all<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">sigemptyset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mask_one<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">sigaddset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mask_one<span class="token punctuation">,</span> SIGCHLD<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">signal</span><span class="token punctuation">(</span>SIGCHLD<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">initjobs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_BLOCK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mask_one<span class="token punctuation">,</span> <span class="token operator">&amp;</span>prev_one<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// block SIGCHILD</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 자식은 SIGCHLD를 block할 필요가 없으므로 다시 unblock</span>
      <span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_SETMASK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>prev_one<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// unblock SIGCHLD</span>
      <span class="token function">execve</span><span class="token punctuation">(</span><span class="token string">&quot;/bin/date&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_BLOCK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mask_all<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">addjob</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_SETMASK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>prev_one<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>부모입장에서 fork가 실행되고 나서 SIGCHLD가 unblock 되는 순간이 단 한번도 존재 하지 않음.</li><li>항상 addjob이 먼저 실행됨 -&gt; 오류 X</li></ul><h3 id="명시적으로-핸들러를-기다리는-방식" tabindex="-1"><a class="header-anchor" href="#명시적으로-핸들러를-기다리는-방식" aria-hidden="true">#</a> 명시적으로 핸들러를 기다리는 방식</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">volatile</span> <span class="token class-name">sig_atomic_t</span> pid<span class="token punctuation">;</span> <span class="token comment">// pid는 전역변수로 선언</span>
<span class="token keyword">void</span> <span class="token function">sigchld_handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> orderrno <span class="token operator">=</span> errno<span class="token punctuation">;</span>
  <span class="token comment">// sigchld_handler에서 waitpid 하는 방식</span>
  pid <span class="token operator">=</span> <span class="token function">waitpid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  errno <span class="token operator">=</span> olderrno<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">sigint_handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">sigset_t</span> mask<span class="token punctuation">,</span> prev<span class="token punctuation">;</span>
  <span class="token keyword">int</span> n <span class="token operator">=</span> N<span class="token punctuation">;</span> <span class="token comment">// N = 10</span>
  <span class="token function">signal</span><span class="token punctuation">(</span>SIGCHLD<span class="token punctuation">,</span> sigchld_handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">signal</span><span class="token punctuation">(</span>SIGINT<span class="token punctuation">,</span> sigint_handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">sigemptyset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">sigaddset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mask<span class="token punctuation">,</span> SIGCHLD<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_BLOCK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mask<span class="token punctuation">,</span> <span class="token operator">&amp;</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// block SIGCHILD</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    pid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_SETMASK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>prev<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

    <span class="token comment">// Wait for SIGCHLD to be recieved </span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pid<span class="token punctuation">)</span>
      <span class="token punctuation">;</span>

    <span class="token comment">// Do some work after receiving SIGCHLD</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>sigsuspend를 사용한 시그널 동기화</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sigsuspend</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">sigset_t</span> <span class="token operator">*</span>mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 아래의 코드를 구현한 것과 동일</span>
<span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_SETMASK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mask<span class="token punctuation">,</span> <span class="token operator">&amp;</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_SETMASK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>prev<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>sigsuspend를 이용한 시그널 기다리기</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token class-name">sigset_t</span> mask<span class="token punctuation">,</span> prev<span class="token punctuation">;</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> N<span class="token punctuation">;</span> <span class="token comment">// N = 10</span>
<span class="token function">signal</span><span class="token punctuation">(</span>SIGCHLD<span class="token punctuation">,</span> sigchld_handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">signal</span><span class="token punctuation">(</span>SIGINT<span class="token punctuation">,</span> sigint_handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sigemptyset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sigaddset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mask<span class="token punctuation">,</span> SIGCHLD<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_BLOCK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mask<span class="token punctuation">,</span> <span class="token operator">&amp;</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// block SIGCHILD</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  pid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">// Wait for SIGCHLD to be recieved </span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pid<span class="token punctuation">)</span>
    <span class="token function">sigsuspend</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Optionally unblock SIGCHILD</span>
  <span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_SETMASK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>prev<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Do some work after receiving SIGCHLD</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,68),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","SYSP_09_11.html.vue"]]);export{k as default};
