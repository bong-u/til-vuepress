import{_ as n,p as s,q as a,a1 as p}from"./framework-96b046e1.js";const t={},e=p(`<h3 id="_14891-톱니바퀴" tabindex="-1"><a class="header-anchor" href="#_14891-톱니바퀴" aria-hidden="true">#</a> 14891 : 톱니바퀴</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque

wheels <span class="token operator">=</span> <span class="token punctuation">[</span>deque<span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token function">rotate</span><span class="token punctuation">(</span>wheel<span class="token punctuation">,</span> direction<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> direction <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        wheel<span class="token punctuation">.</span>appendleft<span class="token punctuation">(</span>wheel<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        wheel<span class="token punctuation">.</span>append<span class="token punctuation">(</span>wheel<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> wheel

K <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
vd <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
res <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>K<span class="token punctuation">)</span><span class="token punctuation">:</span>
    N<span class="token punctuation">,</span> D <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> D<span class="token punctuation">)</span><span class="token punctuation">)</span>
    visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">4</span>
    tmp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
        cur<span class="token punctuation">,</span> curD <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
        tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> curD<span class="token punctuation">)</span><span class="token punctuation">)</span>
        visited<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>

        <span class="token keyword">for</span> v <span class="token keyword">in</span> vd<span class="token punctuation">:</span>
            nxt <span class="token operator">=</span> cur<span class="token operator">+</span>v
            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> nxt <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token keyword">and</span> <span class="token keyword">not</span> visited<span class="token punctuation">[</span>nxt<span class="token punctuation">]</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">and</span> wheels<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">!=</span> wheels<span class="token punctuation">[</span>nxt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
                <span class="token keyword">or</span> v <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> wheels<span class="token punctuation">[</span>nxt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">!=</span> wheels<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>nxt<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">if</span> curD <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    visited<span class="token punctuation">[</span>nxt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
    <span class="token keyword">for</span> cur<span class="token punctuation">,</span> curD <span class="token keyword">in</span> tmp<span class="token punctuation">:</span>
        rotate<span class="token punctuation">(</span>wheels<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">,</span> curD<span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    res <span class="token operator">+=</span> wheels<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>문제를 제대로 이해하는데 오래걸렸다</li><li>혼자 힘으로 풀어서 뿌듯하다</li><li>구현문제 많이 풀어보자!</li></ul>`,3),o=[e];function c(l,u){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","BOJ_14891.html.vue"]]);export{k as default};
