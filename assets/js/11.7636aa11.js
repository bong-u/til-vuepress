(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{285:function(t,a,s){"use strict";s.r(a);var r=s(14),e=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_221208-sysp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_221208-sysp"}},[t._v("#")]),t._v(" 221208 SYSP")]),t._v(" "),a("h2",{attrs:{id:"목차"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#목차"}},[t._v("#")]),t._v(" 목차")]),t._v(" "),a("h3",{attrs:{id:"_12-memory-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-memory-1"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"#12-memory-1"}},[t._v("12 - memory 1")])]),t._v(" "),a("h3",{attrs:{id:"_13-memory-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-memory-2"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"#13-memory-2"}},[t._v("13 - memory 2")])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"_12-memory-1-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-memory-1-2"}},[t._v("#")]),t._v(" 12-memory-1")]),t._v(" "),a("h3",{attrs:{id:"메모리에-관한-불편한-진실"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#메모리에-관한-불편한-진실"}},[t._v("#")]),t._v(" 메모리에 관한 불편한 진실")]),t._v(" "),a("ul",[a("li",[t._v("메모리는 무한의 자원이 아니다")])]),t._v(" "),a("h3",{attrs:{id:"동적-메모리-할당"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#동적-메모리-할당"}},[t._v("#")]),t._v(" 동적 메모리 할당")]),t._v(" "),a("ul",[a("li",[t._v("직접(explicit) vs 간접(implicit) 메모리 할당기\n"),a("ul",[a("li",[t._v("직접 할당 : 응용프로그램이 할당하고, 반환한다\n"),a("ul",[a("li",[t._v("ex) malloc, free")])])]),t._v(" "),a("li",[t._v("간접 할당 : 응용프로그램이 할당하지만, 반환하지는 않는다\n"),a("ul",[a("li",[t._v("ex) java의 garbage collector")])])])])])]),t._v(" "),a("h3",{attrs:{id:"프로세스의-메모리-이미지"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#프로세스의-메모리-이미지"}},[t._v("#")]),t._v(" 프로세스의 메모리 이미지")]),t._v(" "),a("ul",[a("li",[t._v("스택은 아래로, 힙은 위로 성장한다")]),t._v(" "),a("li",[t._v("sbrk 함수가 추가적인 힙 메모리를 운영체제로부터 요청한다 (brk 포인터 이동)")])]),t._v(" "),a("h3",{attrs:{id:"malloc-package"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#malloc-package"}},[t._v("#")]),t._v(" Malloc package")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdlib.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("malloc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 성공시 : 최소 size 바이트의 메모리 블록의 포인터를 반환 (대게 8바이트 단위로 맞추어)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 실패시 : NULL리턴, set errno")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 가용 메모리 풀을 가리키는 블록 포인터 p 리턴")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("realloc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 블록 p의 크기를 변경하고, 새 블록의 포인터를 리턴")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 새 블록의 내용은 이전 블록과 새 블록 크기 중 적은 크기까지는 변화 없음")]),t._v("\n")])])]),a("h3",{attrs:{id:"우수한-malloc-free-프로그램의-목표"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#우수한-malloc-free-프로그램의-목표"}},[t._v("#")]),t._v(" 우수한 malloc/free 프로그램의 목표")]),t._v(" "),a("ol",[a("li",[t._v("주요 목표\n"),a("ul",[a("li",[t._v("malloc과 free에서 우수한 시간 성능을 얻는다")]),t._v(" "),a("li",[t._v("우수한 공간 이용율을 가져야 한다")])])]),t._v(" "),a("li",[t._v("다른 목표\n"),a("ul",[a("li",[t._v("우수한 지역성 : 시간적으로 인접 (또는 유사한 객체) -> 공간상으로 인접")]),t._v(" "),a("li",[t._v("견고성 : free(p1) 함수가 유효한 포인터 p1에 대해 수행하는지 체크할 수 있다.")])])])]),t._v(" "),a("h3",{attrs:{id:"성능-지표-1-처리량-throughput"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#성능-지표-1-처리량-throughput"}},[t._v("#")]),t._v(" 성능 지표 1 : 처리량 (Throughput)")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("단위 시간 동안 완료한 요청의 수")]),t._v(" "),a("h3",{attrs:{id:"성능-지표-2-최대-메모리-이용율-utilization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#성능-지표-2-최대-메모리-이용율-utilization"}},[t._v("#")]),t._v(" 성능 지표 2 : 최대 메모리 이용율 (Utilization)")])]),t._v(" "),a("li",[a("p",[t._v("k개의 요청 후에, 최대 메모리 이용율\n$$ U_{k} = (max_{i<=k}: P_{i}) / H_{k} $$")])])]),t._v(" "),a("h3",{attrs:{id:"내부-메모리-단편화-internal-fragmentation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#내부-메모리-단편화-internal-fragmentation"}},[t._v("#")]),t._v(" 내부 메모리 단편화 (Internal Fragmentation)")]),t._v(" "),a("ul",[a("li",[t._v("일부 블록에서 블록 크기와 데이터 크기간의 차이로 인해 발생")]),t._v(" "),a("li",[t._v("이전 요청 패턴에 의해서만 영향을 받으므로 "),a("strong",[t._v("측정이 용이")])])]),t._v(" "),a("h3",{attrs:{id:"외부-메모리-단편화-external-fragmentation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#외부-메모리-단편화-external-fragmentation"}},[t._v("#")]),t._v(" 외부 메모리 단편화 (External Fragmentation)")]),t._v(" "),a("ul",[a("li",[t._v("힙 전체 메모리를 합치면 수용이 가능하지만 가용 블록의 크기가 작은 경우에 발생")]),t._v(" "),a("li",[t._v("외부 단편화는 미래의 요청 패턴에 의해 결정되므로 "),a("strong",[t._v("측정이 어렵다")])])]),t._v(" "),a("h3",{attrs:{id:"free-블럭-관리하기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#free-블럭-관리하기"}},[t._v("#")]),t._v(" Free 블럭 관리하기")]),t._v(" "),a("ol",[a("li",[t._v("간접리스트 : 크기 정보를 이용하여 모든 블록을 연결")]),t._v(" "),a("li",[t._v("직접리스트 : 가용 블록내에 포인터를 이용")]),t._v(" "),a("li",[t._v("구분 가용리스트 : 크기 클래스마다 별도의 가용 리스트를 유지")]),t._v(" "),a("li",[t._v("크기로 정렬된 블록")])]),t._v(" "),a("h3",{attrs:{id:"방법-1-간접-리스트-방식-implicit-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#방법-1-간접-리스트-방식-implicit-list"}},[t._v("#")]),t._v(" 방법 1 : 간접 리스트 방식 (Implicit List)")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1 word = size(a) + payload + padding")])]),t._v(" "),a("li",[a("p",[t._v("연습문제")]),t._v(" "),a("blockquote",[a("p",[t._v("제한사항 : 헤더는 4바이트, double-word alignment, 블록의 크기는 8의 배수")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("요청")]),t._v(" "),a("th",[t._v("block size")]),t._v(" "),a("th",[t._v("block header(hex)")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Malloc(1)")]),t._v(" "),a("td",[t._v("4+1+3 = 8")]),t._v(" "),a("td",[t._v("size | alloc = 0x8 | 1 = 0x9")])]),t._v(" "),a("tr",[a("td",[t._v("Malloc(5)")]),t._v(" "),a("td",[t._v("4+5+7 = 16")]),t._v(" "),a("td",[t._v("size | alloc = 0x8 | 5 = 0xD")])]),t._v(" "),a("tr",[a("td",[t._v("Malloc(12)")]),t._v(" "),a("td",[t._v("4+12+0 = 16")]),t._v(" "),a("td",[t._v("size | alloc = 0x8 | 12 = 0x1A")])]),t._v(" "),a("tr",[a("td",[t._v("Malloc(13)")]),t._v(" "),a("td",[t._v("4+13+7 = 24")]),t._v(" "),a("td",[t._v("size | alloc = 0x8 | 13 = 0x1B")])])])])])]),t._v(" "),a("h3",{attrs:{id:"간접-리스트-free-블록-찾기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#간접-리스트-free-블록-찾기"}},[t._v("#")]),t._v(" 간접 리스트 : Free 블록 찾기")]),t._v(" "),a("ol",[a("li",[t._v("First fit")]),t._v(" "),a("li",[t._v("Next fit")]),t._v(" "),a("li",[t._v("Best fit")])]),t._v(" "),a("h3",{attrs:{id:"간접-리스트-결합-coalescing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#간접-리스트-결합-coalescing"}},[t._v("#")]),t._v(" 간접 리스트 : 결합 (Coalescing)")]),t._v(" "),a("ul",[a("li",[t._v("free할때 해당 블록의 할당 플래그만 0으로 세팅 -> 잘못된 단편화 발생")]),t._v(" "),a("li",[t._v("free하는 블록의 이전과 다음 블록을 함께 연결해서 더 큰 free블록을 만든다")])]),t._v(" "),a("h3",{attrs:{id:"간접-리스트-양방향-연결"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#간접-리스트-양방향-연결"}},[t._v("#")]),t._v(" 간접 리스트 : 양방향 연결")]),t._v(" "),a("ul",[a("li",[t._v("경계 태그 (Boundary tags)")]),t._v(" "),a("li",[t._v("header를 복제해서 블록의 마지막에 넣는다 (-> footer)")])]),t._v(" "),a("h2",{attrs:{id:"_13-memory-2-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-memory-2-2"}},[t._v("#")]),t._v(" 13-memory-2")]),t._v(" "),a("h3",{attrs:{id:"직접-리스트"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#직접-리스트"}},[t._v("#")]),t._v(" 직접 리스트")]),t._v(" "),a("ul",[a("li",[t._v("가용 블록들의 리스트만을 관리하면, 모든 블록을 관리하지 않는다")]),t._v(" "),a("li",[t._v("연결 링크는 메모리 블럭의 순서와 무관하다")])]),t._v(" "),a("h3",{attrs:{id:"직접-리스트-free"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#직접-리스트-free"}},[t._v("#")]),t._v(" 직접 리스트 : Free")]),t._v(" "),a("ul",[a("li",[t._v("새롭게 반환한 블록은 가용리스트의 어느 위치에 끼워 넣어야 하는가?")])]),t._v(" "),a("ol",[a("li",[t._v("LIFO (last in first out) 정책 : 반환블록을 리스트 맨 앞에 끼워넣는 방법 -> 빠른 시간, 나쁜 단편화 성능")]),t._v(" "),a("li",[t._v("주소정렬 정책 : 블록들의 주소가 순서를 유지하도록 삽입 -> 느린 시간, 우수한 단편화 성능")])]),t._v(" "),a("h3",{attrs:{id:"직접리스트-간접리스트"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#직접리스트-간접리스트"}},[t._v("#")]),t._v(" 직접리스트 <-> 간접리스트")]),t._v(" "),a("ul",[a("li",[t._v("할당시간이 전체 블록의 수가 아니라 가용블록 수에 비례한다")]),t._v(" "),a("li",[t._v("할당과 반환 과정이 복잡하다.")]),t._v(" "),a("li",[t._v("링크 포인터 저장을 위해 추가적인 공간이 필요하다 (블록마다 2워드 추가 필요)")])]),t._v(" "),a("h3",{attrs:{id:"구분-가용-리스트-segrated-free-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#구분-가용-리스트-segrated-free-list"}},[t._v("#")]),t._v(" 구분 가용 리스트 (segrated free list)")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("각 크기 클래스들은 클래스마다의 블록들을 관리한다")])]),t._v(" "),a("li",[a("p",[t._v("크기 n의 블록 할당 방법")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("크기 n의 블록 리스트가 비어있지 않은 경우")]),t._v(" "),a("ol",[a("li",[t._v("리스트의 첫 블록을 할당한다.")])])]),t._v(" "),a("li",[a("p",[t._v("가용리스트가 비어 있는 경우")]),t._v(" "),a("ol",[a("li",[t._v("새 페이지를 할당받는다 (OS로부터 sbrk()를 사용하여)")]),t._v(" "),a("li",[t._v("이 페이지의 모든 블록들로부터 새로운 가용리스트를 생성한다")]),t._v(" "),a("li",[t._v("리스트의 첫 블록을 할당한다")])])]),t._v(" "),a("li",[a("p",[t._v("블록 반환 방법")]),t._v(" "),a("ul",[a("li",[t._v("가용 리스트에 추가")]),t._v(" "),a("li",[t._v("블록 연결 후 해당 클래스 가용리스트에 추가")])])])])]),t._v(" "),a("li",[a("p",[t._v("장점")]),t._v(" "),a("ul",[a("li",[t._v("높은 처리량")]),t._v(" "),a("li",[t._v("우수한 메모리 이용률")])])])])])}),[],!1,null,null,null);a.default=e.exports}}]);