(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{284:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"ood-객체지향설계"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ood-객체지향설계"}},[t._v("#")]),t._v(" OOD (객체지향설계)")]),t._v(" "),a("h2",{attrs:{id:"dynamic-dispatch-and-multiple-inheritance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-dispatch-and-multiple-inheritance"}},[t._v("#")]),t._v(" Dynamic dispatch and Multiple inheritance")]),t._v(" "),a("h3",{attrs:{id:"polymorphism"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#polymorphism"}},[t._v("#")]),t._v(" Polymorphism")]),t._v(" "),a("ol",[a("li",[t._v("Function overloading\n"),a("ul",[a("li",[t._v("using "),a("strong",[t._v("compile time")]),t._v(" types of arguments")])])]),t._v(" "),a("li",[t._v("Function overriding\n"),a("ul",[a("li",[t._v("using "),a("strong",[t._v("runtime types")]),t._v(" of receiver objects")])])])]),t._v(" "),a("h3",{attrs:{id:"virtual-function-for-dynamic-dispatch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#virtual-function-for-dynamic-dispatch"}},[t._v("#")]),t._v(" virtual function for dynamic dispatch")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("dynamic dispatch를 사용하기 위한 조건")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("함수가 virtual keyword로 정의되어 있어야 한다.")])]),t._v(" "),a("li",[a("p",[t._v("receiver object가 포인터(*), 참조(&)를 통해 refer되어야 한다")])])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// from parent class : Employee")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("string "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetInfo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Employee: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" name_ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// from child class : Developer")]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("string "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetInfo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Developer: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" name_"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"override-keyword"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#override-keyword"}},[t._v("#")]),t._v(" "),a("strong",[a("em",[t._v("override")])]),t._v(" keyword")]),t._v(" "),a("ul",[a("li",[t._v("override 키워드를 사용하는 이유")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("직관적인 코드")])]),t._v(" "),a("li",[a("p",[t._v("개발자의 실수 방지")]),t._v(" "),a("ul",[a("li",[t._v("컴파일러는 compile time에 다음과 같은 경우를 감지한다\n"),a("ol",[a("li",[t._v("Overriding non-virtual functions")]),t._v(" "),a("li",[t._v("Overriding non-existing function")])])])])])]),t._v(" "),a("ul",[a("li",[t._v("다른 효과는 없다 단지 확인을 위한 구문")])]),t._v(" "),a("h3",{attrs:{id:"dynamic-dispatch의-원리"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-dispatch의-원리"}},[t._v("#")]),t._v(" dynamic dispatch의 원리")]),t._v(" "),a("ul",[a("li",[t._v("VTABLE은 클래스마다 정적 array의 형태로 존재한다")]),t._v(" "),a("li",[t._v("VPTR은 객체가 만들어질 때 해당 객체의 멤버변수처럼 추가된다")]),t._v(" "),a("li",[t._v("함수를 호출하면 vptr이 가리키는 vtable의 함수를 호출한다")])]),t._v(" "),a("h3",{attrs:{id:"abstract-class"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#abstract-class"}},[t._v("#")]),t._v(" Abstract class")]),t._v(" "),a("blockquote",[a("p",[t._v("하나 이상의 virtual function을 가지는 클래스")])]),t._v(" "),a("ul",[a("li",[t._v("abstract class는 객체를 만들 수 없다")]),t._v(" "),a("li",[t._v("pure virtual functions\n"),a("ul",[a("li",[t._v('" = 0"으로 정의 되어 몸통이 존재하지 않는 함수')]),t._v(" "),a("li",[t._v("자식에서 구현해주지 않으면 에러 발생")])])]),t._v(" "),a("li",[t._v("polymorphic class\n"),a("ul",[a("li",[t._v("한 개 이상의 virtual function을 구현 또는 정의 하는 클래스")]),t._v(" "),a("li",[t._v("부모가 되는 클래스는 destructor를 virtual하게 선언해야한다")])])])]),t._v(" "),a("h3",{attrs:{id:"multiple-inheritance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multiple-inheritance"}},[t._v("#")]),t._v(" Multiple inheritance")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("destructor 호출 순서")]),t._v(" "),a("ul",[a("li",[t._v("상속과 반대 순서로 호출 된다")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Developer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token base-clause"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Citizen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 순서 : Developer -> Employee -> Citizen")]),t._v("\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"diamond-problem-in-multiple-inheritance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#diamond-problem-in-multiple-inheritance"}},[t._v("#")]),t._v(" Diamond problem in multiple inheritance")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("여러 부모가 똑같은 이름의 멤버 변수/함수를 갖는 경우")])]),t._v(" "),a("li",[a("p",[t._v("자식이 사용하지 않으면 오류 X")])]),t._v(" "),a("li",[a("p",[t._v("사용하려고 하면 컴파일 오류 O")])]),t._v(" "),a("li",[a("p",[t._v("경우 1. 두 부모가 pure virtual한 공통된 함수를 갖는 경우 -> 오류X")])])]),t._v(" "),a("h2",{attrs:{id:"design-pattern"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#design-pattern"}},[t._v("#")]),t._v(" Design Pattern")]),t._v(" "),a("h3",{attrs:{id:"three-categories-of-design-patterns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#three-categories-of-design-patterns"}},[t._v("#")]),t._v(" Three categories of design patterns")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Creational : Factory method, Abstract factory, Builder, Prototype, Signleton")])]),t._v(" "),a("li",[a("p",[t._v("Structural : Adapter, Bridge, Composite, Facade, Proxy")])]),t._v(" "),a("li",[a("p",[t._v("Behavioral : ...")])])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Singleton")])]),t._v(" "),a("li",[a("p",[t._v("Builder")]),t._v(" "),a("ul",[a("li",[t._v("builder 객체 분리")]),t._v(" "),a("li",[t._v("builder는 원래 객체의 friend (builder가 자유롭게 access 가능)")])])]),t._v(" "),a("li",[a("p",[t._v("Prototype")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("clone 함수는 부모에서는 pure virtual, 자식에서 구현")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("Shape"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Clone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Circle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("color_"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" radius_"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])])]),t._v(" "),a("li",[a("p",[t._v("Abstract factory")]),t._v(" "),a("ul",[a("li",[t._v("비슷한 객체들을 만드는 공장 클래스 생성")]),t._v(" "),a("li",[t._v("부모 가구 공장 클래스(polymorphic)")]),t._v(" "),a("li",[t._v("-> 자식 공장1(현대적 디자인), 자식 공장2(고전 디자인)")])])]),t._v(" "),a("li",[a("p",[t._v("Adapter")]),t._v(" "),a("ul",[a("li",[t._v("서로 호환되지 않는 두 라이브러리/모듈을 연결 하기 위해 사용")])])]),t._v(" "),a("li",[a("p",[t._v("Bridge")]),t._v(" "),a("ul",[a("li",[t._v("abstract class와 이를 구현하는 class로 구성")]),t._v(" "),a("li",[t._v("abstract class를 이용해 다양한 변화에 대응")])])]),t._v(" "),a("li",[a("p",[t._v("Composite")]),t._v(" "),a("ul",[a("li",[t._v("하나의 부모와 하위 여러 자식을 통해 Tree모양 형성")]),t._v(" "),a("li",[t._v("객체를 만들어 부모클래스 자료형에 저장한다")]),t._v(" "),a("li",[t._v("-> 모든 자식들에 대해 일관적으로 사용 가능")])])]),t._v(" "),a("li",[a("p",[t._v("Facade")]),t._v(" "),a("ul",[a("li",[t._v("복잡한 인터페이스들 앞에 간단한 인터페이스 생성")]),t._v(" "),a("li",[t._v("의존적인 모듈에 업데이트가 필요하다면 해당 모듈만 업데이트 하도록 구현")])])]),t._v(" "),a("li",[a("p",[t._v("Proxy")]),t._v(" "),a("ul",[a("li",[t._v("third-party 모듈과 client 사이에 사용")]),t._v(" "),a("li",[t._v("third-party 모듈이 노출되지 않음 -> 보안 향상")]),t._v(" "),a("li",[t._v("중간에서 입맛대로 조정 가능")])])])]),t._v(" "),a("h2",{attrs:{id:"stl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stl"}},[t._v("#")]),t._v(" STL")]),t._v(" "),a("p",[t._v("STL ( Standard Template Library )")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("array")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<array>")])]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("array"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("vector : 메모리 상 데이터가 연속적이어야한다 -> random access 지원\npush_back 가능")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<vector>")])]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("vector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" vec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("list : linked-list 같은 느낌, 띄엄 띄엄 있어도 연결이 된다\npush_front, push_back 가능\nbegin()+4 -> XXX"),a("br"),t._v("\nstd::next(std::next(std::next))... -> OOO")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<list>")])]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" lst"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("deque : random access 지원, 포인터 연산 불가\npush_front 가능")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<deque>")])]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("deque"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" deq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("stack : LIFO\ntop(), pop() 가능")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stack>")])]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("stack"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("queue : FIFO\nfront(), pop() 가능")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<queue>")])]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("queue"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" que"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("set : stores unique elements following a specific order\ninsert()")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("inclue")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" FunctorClass"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("map : stores elements as a combination of a key value and a mapped vlaue, following a specific order")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<map>")])]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("map"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" FunctorClass"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"introduction-to-template"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introduction-to-template"}},[t._v("#")]),t._v(" Introduction to template")]),t._v(" "),a("p",[t._v("Polymorphism")]),t._v(" "),a("ul",[a("li",[t._v("Compile-time polymorphism : ex) function overloading")]),t._v(" "),a("li",[t._v("Runtime polymorphism : ex) dynamic dispatch")])]),t._v(" "),a("p",[t._v("Template을 활용한 generic programming은 compile-time polymorphism의 일종")]),t._v(" "),a("p",[t._v("Templates in C++")]),t._v(" "),a("ul",[a("li",[t._v("Class template")]),t._v(" "),a("li",[t._v("Function template")])]),t._v(" "),a("p",[t._v("Templates enable developers to perform meta programming (프로그래밍을 위한 프로그래밍)")]),t._v(" "),a("h2",{attrs:{id:"class-template"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-template"}},[t._v("#")]),t._v(" Class template")]),t._v(" "),a("p",[t._v("template <(template_type var)+> class className { ... }")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Multiple template parameters")])]),t._v(" "),a("li",[a("p",[t._v("Template parameter deduction (<= C++17)")])]),t._v(" "),a("li",[a("p",[t._v("Primitive template parameter")])])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" kSize"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[t._v("linking error가 발생할 수 있다\nsolution 1. header파일 안에 멤버 함수들을 정의한다\nsolution 2. cc파일 상단에 정의 해준다")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("N")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pair")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" N"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pair")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T fst"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" N snd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fst_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fst"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("snd_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("snd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("Function Template")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Multiple template parameters")])]),t._v(" "),a("li",[a("p",[t._v("Template parameter deduction")])]),t._v(" "),a("li",[a("p",[t._v("Primitive template paramter")])]),t._v(" "),a("li",[a("p",[t._v("conflict with function overloading : 만들지 않는다")])]),t._v(" "),a("li",[a("p",[t._v("Template function overload resolution")]),t._v(" "),a("ol",[a("li",[t._v("Choose exact matched one in existing functions")]),t._v(" "),a("li",[t._v("generate an exact matched function from function Templates")]),t._v(" "),a("li",[t._v("만드는게 불가능 하면 원래 보통의 overload resolution")])])])]),t._v(" "),a("h2",{attrs:{id:"exception-handling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exception-handling"}},[t._v("#")]),t._v(" Exception handling")]),t._v(" "),a("h3",{attrs:{id:"ranges-of-data-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ranges-of-data-types"}},[t._v("#")]),t._v(" ranges of data types")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<limits>")])]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("number_limits")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lowest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("number_limits")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("number_limits")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[a("strong",[t._v("lowest()와 min()의 차이점")])])]),t._v(" "),a("h3",{attrs:{id:"handle-overflow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#handle-overflow"}},[t._v("#")]),t._v(" handle overflow")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Wrap around : 오버플로우 생긴 직후 값으로 제한")])]),t._v(" "),a("li",[a("p",[t._v("Saturation : 오버플로우 나기 직전까지로 제한")])]),t._v(" "),a("li",[a("p",[t._v("Exception : 개발자가 직접 예외 처리")])])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("detection for integer overflow")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" kMax "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//overflow")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" kMin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//overflow")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("Wrap around for overflow")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WrapAroundForMax")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" kMin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("kMax "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WrapAroundForMin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" kMax "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("kMin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("Saturation for overflow")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SaturateForOverflow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" kMax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SaturateForUnderflow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" kMin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),a("p",[t._v("Standard exception class hierarchy라는 것 이있다.\nstd::exception에 표준 예외들에 대한 hierarchy인데\ncatch의 match는 포함관계에 의해 이루어진다\n맨위에 있는 catch문이 제일 먼저 잡는다")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("c style :")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  Normal\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n  Abnormal\n")])])])]),t._v(" "),a("li",[a("p",[t._v("C++ style :")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WrapAroundForMax")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SafeMath")]),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  Normal\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" res_value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Abnormal\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),a("ul",[a("li",[t._v("catch block can handle only exceptions matched to the type")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("If matched, the thrown exception is assigned to the var and the statements in the catch block are executed")])]),t._v(" "),a("li",[a("p",[t._v("If not matched, try to match exceptions to the next catch block")])]),t._v(" "),a("li",[a("p",[t._v("If no catch block matched,3 jump to the next nearest catch block")])])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("throw 하면 directly catch 문으로 점프한다")])]),t._v(" "),a("li",[a("p",[t._v("예외를 catch하지 못하면 runtime error를 띄운다")])]),t._v(" "),a("li",[a("p",[t._v('catch(...) : "..."이라는 표현은 모든 종류의 예외를 잡는다')])]),t._v(" "),a("li",[a("p",[t._v("Rethrow : catch문 안에서 throw;만 하면 다시 예외를 던져서 다른 곳에서 처리하도록 할 수 있다.")])]),t._v(" "),a("li",[a("p",[t._v('noexcept : noexcept는 "이 함수는 예외를 발생시키지 않아요!" 라는 의미이다. 이 함수를 호출할때 이 함수의 예외를 처리할 필요가 없다')])]),t._v(" "),a("li",[a("p",[t._v("noexcept함수에서 except를 throw하면 program은 비정상 종료를 한다")])]),t._v(" "),a("li",[a("p",[t._v("그 전에 컴파일 할때 warning을 띄워주기는 한다")])]),t._v(" "),a("li",[a("p",[t._v("다만, noexcept 함수 자체에서 발생한 exception이 아닌 noexcept함수에서 호출한 함수에서 예외가 발생한 경우\n-> 간접적으로 exception이 throw된 경우 compile warning을 띄워주지 않는다.")])])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" NonExistFileException "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("runtime_error "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NonExistFileException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("string msg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("runtime_error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);